Index: avrdude.1
===================================================================
--- avrdude.1	(revision 962)
+++ avrdude.1	(working copy)
@@ -949,14 +949,21 @@
 7 ..   8 MHz
 .Ed
 .It Ar ascii
-Use ASCII mode even when the firmware supports BinMode (binary mode). 
+Attempt to ASCII mode even when the firmware supports BinMode (binary mode). 
 BinMode is supported in firmware 2.7 and newer, older FW's either don't
 have BinMode or their BinMode is buggy. ASCII mode is slower and makes 
 the above
 .Ar reset=
 and 
 .Ar speed=
-parameters unavailable. 
+parameters unavailable. Be aware that ASCII mode is not guaranteed to work
+with newer firmware versions, and is retained only to maintain compatability
+with older firmware versions.
+.It Ar nopagedwrite
+Firmware versions 5.10 and newer support a binary mode SPI command that enables
+whole pages to be written to AVR flash memory at once, resulting in a
+significant write speed increase. If use of this mode is not desirable for some
+reason, this option disables it.
 .El
 .El
 .Sh FILES
Index: buspirate.c
===================================================================
--- buspirate.c	(revision 962)
+++ buspirate.c	(working copy)
@@ -61,7 +61,11 @@
 #define BP_FLAG_XPARM_FORCE_ASCII   (1<<1)
 #define BP_FLAG_XPARM_RESET         (1<<2)
 #define BP_FLAG_XPARM_SPIFREQ       (1<<3)
+#define BP_FLAG_NOPAGEDWRITE        (1<<4)
+#define BP_FLAG_NOPAGEDREAD	    (1<<5)
 
+int timeout = 100;
+
 struct pdata
 {
 	char	hw_version[10];
@@ -74,22 +78,11 @@
 };
 #define PDATA(pgm) ((struct pdata *)(pgm->cookie))
 
-/* Binary mode is available from firmware v2.7 on */
-#define FW_BINMODE_VER	207
-
 /* ====== Feature checks ====== */
 static inline int
-buspirate_has_aux2(struct programmer_t *pgm)
-{
-	return ((PDATA(pgm)->fw_version >= 300) &&
-		strcmp(PDATA(pgm)->hw_version, "v1a") == 0);
-}
-
-static inline int
 buspirate_uses_ascii(struct programmer_t *pgm)
 {
-	return (pgm->flag & BP_FLAG_XPARM_FORCE_ASCII) ||
-		(PDATA(pgm)->fw_version < FW_BINMODE_VER);
+	return (pgm->flag & BP_FLAG_XPARM_FORCE_ASCII);
 }
 
 /* ====== Serial talker functions - binmode ====== */
@@ -206,7 +199,7 @@
 			break;
 		}
 		buf_p++;
-		serial_recv_timeout = 100;
+		serial_recv_timeout = timeout;
 	}
 	serial_recv_timeout = orig_serial_recv_timeout;
 	if (verbose)
@@ -272,8 +265,14 @@
 	while (1) {
 		rcvd = buspirate_readline(pgm, NULL, 0);
 
-		if (strncmp(rcvd, expect, expect_len) == 0)
-			got_it = 1;
+		if (strncmp(rcvd, expect, expect_len) == 0) {
+			if (! wait_for_prompt) {
+				serial_drain(&pgm->fd, 0);
+				return 1;
+			} else {
+				got_it = 1;
+			}
+		}
 
 		if (buspirate_is_prompt(rcvd))
 			break;
@@ -332,6 +331,24 @@
 			pgm->flag |= BP_FLAG_XPARM_RESET;
 			continue;
 		}
+
+		if (strcmp(extended_param, "nopagedwrite") == 0) {
+			pgm->flag |= BP_FLAG_NOPAGEDWRITE;
+			continue;
+		}
+
+		if (strcmp(extended_param, "nopagedread") == 0) {
+			pgm->flag |= BP_FLAG_NOPAGEDREAD;
+			pgm->paged_load = NULL;
+			continue;
+		}
+
+		if (sscanf(extended_param, "timeout=%d", &timeout) == 1) {
+			if (timeout <= 0) {
+				fprintf(stderr, "BusPirate: timeout value must be positive and non-zero.\n");
+				return -1;
+			}
+		}
 	}
 
 	return 0;
@@ -344,15 +361,6 @@
 	if (PDATA(pgm)->reset == 0x00)
 		PDATA(pgm)->reset |= BP_RESET_CS;
 
-	/* reset=AUX2 is only available on HW=v1a and FW>=3.0 */
-	if ((PDATA(pgm)->reset & BP_RESET_AUX2) && !buspirate_has_aux2(pgm)) {
-		fprintf(stderr, "BusPirate: Pin AUX2 is only available in binary mode\n");
-		fprintf(stderr, "BusPirate: with hardware==v1a && firmware>=3.0\n");
-		fprintf(stderr, "BusPirate: Your hardware==%s and firmware==%d.%d\n",
-				PDATA(pgm)->hw_version, PDATA(pgm)->fw_version/100, PDATA(pgm)->fw_version%100);
-		return -1;
-	}
-
 	if ((PDATA(pgm)->reset != BP_RESET_CS) && buspirate_uses_ascii(pgm)) {
 		fprintf(stderr, "BusPirate: RESET pin other than CS is not supported in ASCII mode\n");
 		return -1;
@@ -427,6 +435,7 @@
 static int buspirate_start_spi_mode_bin(struct programmer_t *pgm)
 {
 	char buf[20] = { '\0' };
+	unsigned int ver = 0;
 
 	/* == Switch to binmode - send 20x '\0' == */
 	buspirate_send_bin(pgm, buf, sizeof(buf));
@@ -459,13 +468,37 @@
 		fprintf(stderr, "BusPirate SPI version: %d\n",
 			PDATA(pgm)->bin_spi_version);
 
+	if (pgm->flag & BP_FLAG_NOPAGEDWRITE) {
+		if (verbose)
+			fprintf(stderr, "%s: Paged flash write disabled.\n", progname);
+	} else {
+		/* Check for write-then-read without !CS/CS and disable readpaged_write if absent: */
+		strncpy(buf, "\x5\x0\x0\x0\x0", 5);
+		buspirate_send_bin(pgm, buf, 5);
+		buspirate_recv_bin(pgm, buf, 1);
+		if (buf[0] != 0x01) {
+
+			/* Disable paged write: */
+			pgm->flag |= BP_FLAG_NOPAGEDWRITE;
+
+			/* Return to SPI mode (0x00s have landed us back in binary bitbang mode): */
+			buf[0] = 0x1;
+			buspirate_send_bin(pgm, buf, 1);
+
+			if (verbose)
+				fprintf(stderr, "%s: Disabling paged flash write. (Need BusPirate firmware >=v5.10.)\n", progname);
+
+			/* Flush serial buffer: */
+			serial_drain(&pgm->fd, 0);
+		} else {
+			if (verbose)
+				fprintf(stderr, "%s: Paged flash write enabled.\n", progname);
+		}
+	}
+
 	/* 0b0100wxyz - Configure peripherals w=power, x=pull-ups/aux2, y=AUX, z=CS
 	 * we want power (0x48) and all reset pins high. */
-	PDATA(pgm)->current_peripherals_config  = 0x48;
-	PDATA(pgm)->current_peripherals_config |= BP_RESET_CS;
-	PDATA(pgm)->current_peripherals_config |= BP_RESET_AUX;
-	if (buspirate_has_aux2(pgm))
-		PDATA(pgm)->current_peripherals_config |= BP_RESET_AUX2;
+	PDATA(pgm)->current_peripherals_config  = 0x48 | PDATA(pgm)->reset;
 	buspirate_expect_bin_byte(pgm, PDATA(pgm)->current_peripherals_config, 0x01);
 	usleep(50000);	// sleep for 50ms after power up
 
@@ -481,6 +514,21 @@
 	 *       => 0b10001010 = 0x8a */
 	buspirate_expect_bin_byte(pgm, 0x8A, 0x01);
 
+	/* AVR Extended Commands - test for existence */
+	if (! (pgm->flag & BP_FLAG_NOPAGEDREAD)) {
+		if (buspirate_expect_bin_byte(pgm, 0x06, 0x01)) {
+			strncpy(buf, "\x1\x0\x0", 3);
+			buspirate_send_bin(pgm, buf, 1);
+			buspirate_recv_bin(pgm, buf, 3);
+			ver = buf[1] << 8 | buf[2];
+			if (verbose) fprintf(stderr, "AVR Extended Commands version %d\n", ver);
+		} else {
+			if (verbose) fprintf(stderr, "AVR Extended Commands not found.\n");
+			pgm->flag |= BP_FLAG_NOPAGEDREAD;
+			pgm->paged_load = NULL;
+		}		
+	}
+
 	return 0;
 }
 
@@ -490,7 +538,7 @@
 	int cmd;
 	char *rcvd, mode[11], buf[5];
 
-	buspirate_send(pgm, "M\n");
+	buspirate_send(pgm, "m\n");
 	while(1) {
 		rcvd = buspirate_readline(pgm, NULL, 0);
 		if (spi_cmd == -1 && sscanf(rcvd, "%d. %10s", &cmd, mode)) {
@@ -522,7 +570,7 @@
 		}
 		if (buspirate_is_prompt(rcvd)) {
 			if (strncmp(rcvd, "SPI>", 4) == 0) {
-				fprintf(stderr, "BusPirate is now configured for SPI\n");
+				if (verbose) fprintf(stderr, "BusPirate is now configured for SPI\n");
 				break;
 			}
 			/* Not yet 'SPI>' prompt */
@@ -541,11 +589,31 @@
 	unsigned char *reset_str = "#\n";
 	unsigned char *accept_str = "y\n";
 	char *rcvd;
-	int fw_v1 = 0, fw_v2 = 0;
 	int rc, print_banner = 0;
 
-	fprintf(stderr, "Detecting BusPirate...\n");
+	/* Ensure configuration is self-consistant: */
+	if (buspirate_verifyconfig(pgm)<0)
+		exit(1);
 
+	/* Attempt to start binary SPI mode unless explicitly told otherwise: */
+	if (!buspirate_uses_ascii(pgm)) {
+		fprintf(stderr, "Attempting to initiate BusPirate binary mode...\n");
+
+		/* Send two CRs to ensure we're not in a sub-menu of the UI if we're in ASCII mode: */
+		buspirate_send_bin(pgm, "\n\n", 2);
+
+		/* Clear input buffer: */
+		serial_drain(&pgm->fd, 0);
+
+		/* Attempt to enter binary mode: */
+		if (buspirate_start_spi_mode_bin(pgm) >= 0)
+			return;
+		else
+			fprintf(stderr, "%s: Failed to start binary SPI mode, falling back to ASCII...\n", progname);
+	}
+
+	fprintf(stderr, "Attempting to initiate BusPirate ASCII mode...\n");
+
 	/* Call buspirate_send_bin() instead of buspirate_send() 
 	 * because we don't know if BP is in text or bin mode */
 	rc = buspirate_send_bin(pgm, reset_str, strlen(reset_str));
@@ -557,11 +625,8 @@
 	while(1) {
 		rcvd = buspirate_readline_noexit(pgm, NULL, 0);
 		if (! rcvd) {
-			fprintf(stderr, "BusPirate is not responding. Attempting reset.\n");
-			buspirate_reset_from_binmode(pgm);
-			/* re-run buspirate_enable() */
-			buspirate_enable(pgm);
-			return;
+			fprintf(stderr, "%s: Fatal: Programmer is not responding.\n", progname);
+			exit(1);
 		}
 		if (strncmp(rcvd, "Are you sure?", 13) == 0) {
 			buspirate_send_bin(pgm, accept_str, strlen(accept_str));
@@ -574,26 +639,10 @@
 			puts("**");
 			break;
 		}
-		sscanf(rcvd, "Bus Pirate %9s", PDATA(pgm)->hw_version);
-		sscanf(rcvd, "Firmware v%d.%d", &fw_v1, &fw_v2);
 		if (print_banner)
 			fprintf(stderr, "**  %s", rcvd);
 	}
 
-	PDATA(pgm)->fw_version = 100 * fw_v1 + fw_v2;
-	if (PDATA(pgm)->hw_version[0] == 0 || PDATA(pgm)->fw_version == 0) {
-		fprintf(stderr, "BusPirate not detected. Aborting.\n");
-		exit(1);
-	}
-
-	if (buspirate_verifyconfig(pgm) < 0)
-		exit(1);
-
-	if (PDATA(pgm)->fw_version >= FW_BINMODE_VER && !(pgm->flag & BP_FLAG_XPARM_FORCE_ASCII)) {
-		fprintf(stderr, "BusPirate: using BINARY mode\n");
-		if (buspirate_start_spi_mode_bin(pgm) < 0)
-			fprintf(stderr, "%s: Failed to start binary SPI mode\n", progname);
-	}
 	if (!pgm->flag & BP_FLAG_IN_BINMODE) {
 		fprintf(stderr, "BusPirate: using ASCII mode\n");
 		if (buspirate_start_spi_mode_ascii(pgm) < 0) {
@@ -606,7 +655,7 @@
 static void buspirate_disable(struct programmer_t *pgm)
 {
 	if (pgm->flag & BP_FLAG_IN_BINMODE) {
-		serial_recv_timeout = 100;
+		serial_recv_timeout = timeout;
 		buspirate_reset_from_binmode(pgm);
 	} else
 		buspirate_expect(pgm, "#\n", "RESET", 1);
@@ -704,6 +753,169 @@
 		return buspirate_cmd_ascii(pgm, cmd, res);
 }
 
+/* Paged load function which utilizes the AVR Extended Commands set */
+static int buspirate_paged_load(struct programmer_t *pgm,
+		AVRPART *p,
+		AVRMEM *m,
+		int page_size,
+		int n_bytes)
+{
+	unsigned char commandbuf[10];
+	unsigned char buf[275];
+	unsigned int addr = 0;
+
+	if (verbose) fprintf(stderr, "BusPirate: buspirate_paged_load(..,%s,%d,%d)\n",m->desc,m->page_size,n_bytes);
+
+	// This should never happen, but still...
+	if (pgm->flag & BP_FLAG_NOPAGEDREAD) {
+		fprintf(stderr, "BusPirate: buspirate_paged_load() called while in nopagedread mode!\n");
+		return -1;
+	}
+
+	// determine what type of memory to read, only flash is supported
+	if (strcmp(m->desc, "flash") != 0) {
+		return -1;	
+	}
+
+	// cheat, just read in all the bytes in the flash up to n_bytes
+	strncpy(commandbuf, "\x6\x2", 2);
+	commandbuf[2] = 0;
+	commandbuf[3] = 0;
+	commandbuf[4] = 0;
+	commandbuf[5] = 0;
+
+	commandbuf[6] = (n_bytes >> 24) & 0xff;
+	commandbuf[7] = (n_bytes >> 16) & 0xff;
+	commandbuf[8] = (n_bytes >> 8) & 0xff;
+	commandbuf[9] = (n_bytes) & 0xff;
+
+	buspirate_send_bin(pgm, commandbuf, 10);
+	buspirate_recv_bin(pgm, buf, 1);
+	buspirate_recv_bin(pgm, buf, 1);
+
+	if (buf[0] != 0x01) {
+		fprintf(stderr, "BusPirate: Paged Read command returned zero.\n");
+		return -1;
+	}
+
+	for (addr = 0; addr < n_bytes; addr++) {	
+		report_progress (addr, n_bytes, NULL);
+		buspirate_recv_bin(pgm, &m->buf[addr], 1);
+	}
+
+	return n_bytes;
+}
+
+
+/* Paged write function which utilizes the Bus Pirate's "Write then Read" binary SPI instruction */
+static int buspirate_paged_write(struct programmer_t *pgm,
+		AVRPART *p,
+		AVRMEM *m,
+		int page_size,
+		int n_data_bytes)
+{
+	int page, i;
+	int addr = 0;
+	int n_page_writes;
+	int this_page_size;
+	char cmd_buf[4096] = {'\0'};
+	char send_byte, recv_byte;
+
+	if (pgm->flag & BP_FLAG_NOPAGEDWRITE) {
+		/* Return if we've nominated not to use paged writes. */
+		return -1;
+	}
+
+	if (page_size>1024) {
+		/* Page sizes greater than 1kB not yet supported. */
+		return -1;
+	}
+
+	if (strcmp(m->desc,"flash") != 0) {
+		/* Only flash memory currently supported. */
+		return -1;
+	}
+
+	if (m->op[AVR_OP_LOADPAGE_LO] == NULL) {
+		/* Only word-addressable memory currently supported. */
+		return -1;
+	}
+
+	/* Calculate total number of page writes needed: */
+	n_page_writes = n_data_bytes/page_size;
+	if (n_data_bytes%page_size >0)
+		n_page_writes++;
+
+	/* Ensure error LED is off: */
+	pgm->err_led(pgm, OFF);
+
+	/* Loop over pages: */
+	for (page=0; page<n_page_writes; page++) {
+
+		/* Update progress bar: */
+		report_progress(page*page_size, n_data_bytes, NULL);
+
+		/* Determine bytes to write in this page: */
+		this_page_size = page_size;
+		if (page == n_page_writes-1)
+			this_page_size = n_data_bytes - page_size*page;
+
+		/* Set up command buffer: */
+		memset(cmd_buf, 0, 4*this_page_size);
+		for (i=0; i<this_page_size; i++) {
+
+			addr = page*page_size + i;
+
+			if (i%2 == 0) {
+				avr_set_bits(m->op[AVR_OP_LOADPAGE_LO], &(cmd_buf[4*i]));
+				avr_set_addr(m->op[AVR_OP_LOADPAGE_LO], &(cmd_buf[4*i]), addr/2);
+				avr_set_input(m->op[AVR_OP_LOADPAGE_LO], &(cmd_buf[4*i]), m->buf[addr]);
+			} else {
+				avr_set_bits(m->op[AVR_OP_LOADPAGE_HI], &(cmd_buf[4*i]));
+				avr_set_addr(m->op[AVR_OP_LOADPAGE_HI], &(cmd_buf[4*i]), addr/2);
+				avr_set_input(m->op[AVR_OP_LOADPAGE_HI], &(cmd_buf[4*i]), m->buf[addr]);
+			}
+		}
+
+		/* 00000100 - Write then read */
+		send_byte = 0x05;
+		buspirate_send_bin(pgm, &send_byte, 1);
+
+		/* Number of bytes to write: */
+		send_byte = (4*this_page_size)/0x100;
+		buspirate_send_bin(pgm, &send_byte, 1); /* High byte */
+		send_byte = (4*this_page_size)%0x100;
+		buspirate_send_bin(pgm, &send_byte, 1); /* Low byte */
+
+		/* Number of bytes to read: */
+		send_byte = 0x0;
+		buspirate_send_bin(pgm, &send_byte, 1); /* High byte */
+		buspirate_send_bin(pgm, &send_byte, 1); /* Low byte */
+
+		/* Set programming LED: */
+		pgm->pgm_led(pgm, ON);
+
+		/* Send command buffer: */
+		buspirate_send_bin(pgm, cmd_buf, 4*this_page_size);
+
+		/* Check for write failure: */
+		if ((buspirate_recv_bin(pgm, &recv_byte, 1) == EOF) || (recv_byte != 0x01)) {
+			fprintf(stderr, "BusPirate: Fatal error: Write Then Read did not succeed.\n");
+			pgm->pgm_led(pgm, OFF);
+			pgm->err_led(pgm, ON);
+			exit(1);
+		}
+
+		/* Unset programming LED: */
+		pgm->pgm_led(pgm, OFF);
+
+		/* Write loaded page to flash: */
+		avr_write_page(pgm, p, m, addr);
+	}
+
+	return n_data_bytes;
+}
+
 static int buspirate_program_enable(struct programmer_t *pgm, AVRPART * p)
 {
 	unsigned char cmd[4];
@@ -782,6 +994,9 @@
 	pgm->read_byte      = avr_read_byte_default;
 	pgm->write_byte     = avr_write_byte_default;
 
+	pgm->paged_write    = buspirate_paged_write;
+	pgm->paged_load	    = buspirate_paged_load;
+
 	/* Support functions */
 	pgm->parseextparams = buspirate_parseextparms;
 
@@ -792,4 +1007,3 @@
 		exit(1);
 	}
 }
-
